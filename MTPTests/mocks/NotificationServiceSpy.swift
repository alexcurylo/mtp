// @copyright Trollwerks Inc.

@testable import MTP

// generated by https://github.com/seanhenry/SwiftMockGeneratorForXcode
// swiftlint:disable all

final class NotificationServiceSpy: NotificationService {
    var invokedAuthorizeNotifications = false
    var invokedAuthorizeNotificationsCount = 0
    var stubbedAuthorizeNotificationsThenResult: (Bool, Void)?
    func authorizeNotifications(then: @escaping (Bool) -> Void) {
        invokedAuthorizeNotifications = true
        invokedAuthorizeNotificationsCount += 1
        if let result = stubbedAuthorizeNotificationsThenResult {
            then(result.0)
        }
    }
    var invokedAsk = false
    var invokedAskCount = 0
    var invokedAskParameters: (question: String, Void)?
    var invokedAskParametersList = [(question: String, Void)]()
    var stubbedAskThenResult: (Bool, Void)?
    func ask(question: String,
    then: @escaping (Bool) -> Void) {
        invokedAsk = true
        invokedAskCount += 1
        invokedAskParameters = (question, ())
        invokedAskParametersList.append((question, ()))
        if let result = stubbedAskThenResult {
            then(result.0)
        }
    }
    var invokedCheckTriggered = false
    var invokedCheckTriggeredCount = 0
    func checkTriggered() {
        invokedCheckTriggered = true
        invokedCheckTriggeredCount += 1
    }
    var invokedNotify = false
    var invokedNotifyCount = 0
    var invokedNotifyParameters: (mappable: Mappable, triggered: Date)?
    var invokedNotifyParametersList = [(mappable: Mappable, triggered: Date)]()
    func notify(mappable: Mappable,
    triggered: Date) {
        invokedNotify = true
        invokedNotifyCount += 1
        invokedNotifyParameters = (mappable, triggered)
        invokedNotifyParametersList.append((mappable, triggered))
    }
    var invokedCongratulateItem = false
    var invokedCongratulateItemCount = 0
    var invokedCongratulateItemParameters: (item: Checklist.Item, Void)?
    var invokedCongratulateItemParametersList = [(item: Checklist.Item, Void)]()
    func congratulate(item: Checklist.Item) {
        invokedCongratulateItem = true
        invokedCongratulateItemCount += 1
        invokedCongratulateItemParameters = (item, ())
        invokedCongratulateItemParametersList.append((item, ()))
    }
    var invokedCongratulateMappable = false
    var invokedCongratulateMappableCount = 0
    var invokedCongratulateMappableParameters: (mappable: Mappable, Void)?
    var invokedCongratulateMappableParametersList = [(mappable: Mappable, Void)]()
    func congratulate(mappable: Mappable) {
        invokedCongratulateMappable = true
        invokedCongratulateMappableCount += 1
        invokedCongratulateMappableParameters = (mappable, ())
        invokedCongratulateMappableParametersList.append((mappable, ()))
    }
    var invokedInfoBackground = false
    var invokedInfoBackgroundCount = 0
    var invokedInfoBackgroundParameters: (title: String?, body: String?)?
    var invokedInfoBackgroundParametersList = [(title: String?, body: String?)]()
    func infoBackground(title: String?,
    body: String?) {
        invokedInfoBackground = true
        invokedInfoBackgroundCount += 1
        invokedInfoBackgroundParameters = (title, body)
        invokedInfoBackgroundParametersList.append((title, body))
    }
    var invokedVisitBackground = false
    var invokedVisitBackgroundCount = 0
    var invokedVisitBackgroundParameters: (title: String, body: String, info: Info)?
    var invokedVisitBackgroundParametersList = [(title: String, body: String, info: Info)]()
    func visitBackground(title: String,
    body: String,
    info: Info) {
        invokedVisitBackground = true
        invokedVisitBackgroundCount += 1
        invokedVisitBackgroundParameters = (title, body, info)
        invokedVisitBackgroundParametersList.append((title, body, info))
    }
    var invokedBackground = false
    var invokedBackgroundCount = 0
    var shouldInvokeBackgroundThen = false
    func background(then: @escaping () -> Void) {
        invokedBackground = true
        invokedBackgroundCount += 1
        if shouldInvokeBackgroundThen {
            then()
        }
    }
    var invokedPost = false
    var invokedPostCount = 0
    var invokedPostParameters: (title: String, subtitle: String, body: String, category: String, info: Info)?
    var invokedPostParametersList = [(title: String, subtitle: String, body: String, category: String, info: Info)]()
    func post(title: String,
    subtitle: String,
    body: String,
    category: String,
    info: Info) {
        invokedPost = true
        invokedPostCount += 1
        invokedPostParameters = (title, subtitle, body, category, info)
        invokedPostParametersList.append((title, subtitle, body, category, info))
    }
    var invokedModalError = false
    var invokedModalErrorCount = 0
    var invokedModalErrorParameters: (error: String, Void)?
    var invokedModalErrorParametersList = [(error: String, Void)]()
    func modal(error: String) {
        invokedModalError = true
        invokedModalErrorCount += 1
        invokedModalErrorParameters = (error, ())
        invokedModalErrorParametersList.append((error, ()))
    }
    var invokedModalInfo = false
    var invokedModalInfoCount = 0
    var invokedModalInfoParameters: (info: String, Void)?
    var invokedModalInfoParametersList = [(info: String, Void)]()
    func modal(info: String) {
        invokedModalInfo = true
        invokedModalInfoCount += 1
        invokedModalInfoParameters = (info, ())
        invokedModalInfoParametersList.append((info, ()))
    }
    var invokedModalSuccess = false
    var invokedModalSuccessCount = 0
    var invokedModalSuccessParameters: (success: String, Void)?
    var invokedModalSuccessParametersList = [(success: String, Void)]()
    func modal(success: String) {
        invokedModalSuccess = true
        invokedModalSuccessCount += 1
        invokedModalSuccessParameters = (success, ())
        invokedModalSuccessParametersList.append((success, ()))
    }
    var invokedDismissModal = false
    var invokedDismissModalCount = 0
    func dismissModal() {
        invokedDismissModal = true
        invokedDismissModalCount += 1
    }
    var invokedMessage = false
    var invokedMessageCount = 0
    var invokedMessageParameters: (error: String, Void)?
    var invokedMessageParametersList = [(error: String, Void)]()
    func message(error: String) {
        invokedMessage = true
        invokedMessageCount += 1
        invokedMessageParameters = (error, ())
        invokedMessageParametersList.append((error, ()))
    }
    var invokedUnimplemented = false
    var invokedUnimplementedCount = 0
    func unimplemented() {
        invokedUnimplemented = true
        invokedUnimplementedCount += 1
    }
}
