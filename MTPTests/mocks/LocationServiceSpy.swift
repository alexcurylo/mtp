// @copyright Trollwerks Inc.

import CoreLocation
@testable import MTP

// generated by https://github.com/seanhenry/SwiftMockGeneratorForXcode
// swiftlint:disable all

final class LocationServiceSpy: LocationService {
    var invokedHereGetter = false
    var invokedHereGetterCount = 0
    var stubbedHere: CLLocationCoordinate2D!
    var here: CLLocationCoordinate2D? {
        invokedHereGetter = true
        invokedHereGetterCount += 1
        return stubbedHere
    }
    var invokedInsideGetter = false
    var invokedInsideGetterCount = 0
    var stubbedInside: Location!
    var inside: Location? {
        invokedInsideGetter = true
        invokedInsideGetterCount += 1
        return stubbedInside
    }
    var invokedDistancesGetter = false
    var invokedDistancesGetterCount = 0
    var stubbedDistances: Distances!
    var distances: Distances {
        invokedDistancesGetter = true
        invokedDistancesGetterCount += 1
        return stubbedDistances
    }
    var invokedAppGetter = false
    var invokedAppGetterCount = 0
    var stubbedApp: ApplicationService!
    var app: ApplicationService {
        invokedAppGetter = true
        invokedAppGetterCount += 1
        return stubbedApp
    }
    var invokedDataGetter = false
    var invokedDataGetterCount = 0
    var stubbedData: DataService!
    var data: DataService {
        invokedDataGetter = true
        invokedDataGetterCount += 1
        return stubbedData
    }
    var invokedLocGetter = false
    var invokedLocGetterCount = 0
    var stubbedLoc: LocationService!
    var loc: LocationService {
        invokedLocGetter = true
        invokedLocGetterCount += 1
        return stubbedLoc
    }
    var invokedLogGetter = false
    var invokedLogGetterCount = 0
    var stubbedLog: LoggingService!
    var log: LoggingService {
        invokedLogGetter = true
        invokedLogGetterCount += 1
        return stubbedLog
    }
    var invokedMtpGetter = false
    var invokedMtpGetterCount = 0
    var stubbedMtp: MTPNetworkService!
    var mtp: MTPNetworkService {
        invokedMtpGetter = true
        invokedMtpGetterCount += 1
        return stubbedMtp
    }
    var invokedNoteGetter = false
    var invokedNoteGetterCount = 0
    var stubbedNote: NotificationService!
    var note: NotificationService {
        invokedNoteGetter = true
        invokedNoteGetterCount += 1
        return stubbedNote
    }
    var invokedNearest = false
    var invokedNearestCount = 0
    var invokedNearestParameters: (list: Checklist, id: Int, coordinate: CLLocationCoordinate2D)?
    var invokedNearestParametersList = [(list: Checklist, id: Int, coordinate: CLLocationCoordinate2D)]()
    var stubbedNearestResult: Mappable!
    func nearest(list: Checklist,
    id: Int,
    to coordinate: CLLocationCoordinate2D) -> Mappable? {
        invokedNearest = true
        invokedNearestCount += 1
        invokedNearestParameters = (list, id, coordinate)
        invokedNearestParametersList.append((list, id, coordinate))
        return stubbedNearestResult
    }
    var invokedInsert = false
    var invokedInsertCount = 0
    var invokedInsertParameters: (tracker: Any, Void)?
    var invokedInsertParametersList = [(tracker: Any, Void)]()
    func insert<T>(tracker: T) where T: LocationTracker, T: Hashable {
        invokedInsert = true
        invokedInsertCount += 1
        invokedInsertParameters = (tracker, ())
        invokedInsertParametersList.append((tracker, ()))
    }
    var invokedRemove = false
    var invokedRemoveCount = 0
    var invokedRemoveParameters: (tracker: Any, Void)?
    var invokedRemoveParametersList = [(tracker: Any, Void)]()
    func remove<T>(tracker: T) where T: LocationTracker, T: Hashable {
        invokedRemove = true
        invokedRemoveCount += 1
        invokedRemoveParameters = (tracker, ())
        invokedRemoveParametersList.append((tracker, ()))
    }
    var invokedRequest = false
    var invokedRequestCount = 0
    var invokedRequestParameters: (permission: LocationPermission, Void)?
    var invokedRequestParametersList = [(permission: LocationPermission, Void)]()
    func request(permission: LocationPermission) {
        invokedRequest = true
        invokedRequestCount += 1
        invokedRequestParameters = (permission, ())
        invokedRequestParametersList.append((permission, ()))
    }
    var invokedStart = false
    var invokedStartCount = 0
    var invokedStartParameters: (permission: LocationPermission, Void)?
    var invokedStartParametersList = [(permission: LocationPermission, Void)]()
    func start(permission: LocationPermission) {
        invokedStart = true
        invokedStartCount += 1
        invokedStartParameters = (permission, ())
        invokedStartParametersList.append((permission, ()))
    }
    var invokedInject = false
    var invokedInjectCount = 0
    var invokedInjectParameters: (handler: LocationHandler, Void)?
    var invokedInjectParametersList = [(handler: LocationHandler, Void)]()
    func inject(handler: LocationHandler) {
        invokedInject = true
        invokedInjectCount += 1
        invokedInjectParameters = (handler, ())
        invokedInjectParametersList.append((handler, ()))
    }
    var invokedCloseMappable = false
    var invokedCloseMappableCount = 0
    var invokedCloseMappableParameters: (mappable: Mappable, Void)?
    var invokedCloseMappableParametersList = [(mappable: Mappable, Void)]()
    func close(mappable: Mappable) {
        invokedCloseMappable = true
        invokedCloseMappableCount += 1
        invokedCloseMappableParameters = (mappable, ())
        invokedCloseMappableParametersList.append((mappable, ()))
    }
    var invokedNotifyMappable = false
    var invokedNotifyMappableCount = 0
    var invokedNotifyMappableParameters: (mappable: Mappable, Void)?
    var invokedNotifyMappableParametersList = [(mappable: Mappable, Void)]()
    func notify(mappable: Mappable) {
        invokedNotifyMappable = true
        invokedNotifyMappableCount += 1
        invokedNotifyMappableParameters = (mappable, ())
        invokedNotifyMappableParametersList.append((mappable, ()))
    }
    var invokedRevealMappable = false
    var invokedRevealMappableCount = 0
    var invokedRevealMappableParameters: (mappable: Mappable, callout: Bool)?
    var invokedRevealMappableParametersList = [(mappable: Mappable, callout: Bool)]()
    func reveal(mappable: Mappable, callout: Bool) {
        invokedRevealMappable = true
        invokedRevealMappableCount += 1
        invokedRevealMappableParameters = (mappable, callout)
        invokedRevealMappableParametersList.append((mappable, callout))
    }
    var invokedShowMappable = false
    var invokedShowMappableCount = 0
    var invokedShowMappableParameters: (mappable: Mappable, Void)?
    var invokedShowMappableParametersList = [(mappable: Mappable, Void)]()
    func show(mappable: Mappable) {
        invokedShowMappable = true
        invokedShowMappableCount += 1
        invokedShowMappableParameters = (mappable, ())
        invokedShowMappableParametersList.append((mappable, ()))
    }
    var invokedUpdateMappable = false
    var invokedUpdateMappableCount = 0
    var invokedUpdateMappableParameters: (mappable: Mappable, Void)?
    var invokedUpdateMappableParametersList = [(mappable: Mappable, Void)]()
    func update(mappable: Mappable) {
        invokedUpdateMappable = true
        invokedUpdateMappableCount += 1
        invokedUpdateMappableParameters = (mappable, ())
        invokedUpdateMappableParametersList.append((mappable, ()))
    }
    var invokedClosePlace = false
    var invokedClosePlaceCount = 0
    var invokedClosePlaceParameters: (place: PlaceAnnotation, Void)?
    var invokedClosePlaceParametersList = [(place: PlaceAnnotation, Void)]()
    func close(place: PlaceAnnotation) {
        invokedClosePlace = true
        invokedClosePlaceCount += 1
        invokedClosePlaceParameters = (place, ())
        invokedClosePlaceParametersList.append((place, ()))
    }
    var invokedNotifyPlace = false
    var invokedNotifyPlaceCount = 0
    var invokedNotifyPlaceParameters: (place: PlaceAnnotation, Void)?
    var invokedNotifyPlaceParametersList = [(place: PlaceAnnotation, Void)]()
    func notify(place: PlaceAnnotation) {
        invokedNotifyPlace = true
        invokedNotifyPlaceCount += 1
        invokedNotifyPlaceParameters = (place, ())
        invokedNotifyPlaceParametersList.append((place, ()))
    }
    var invokedRevealPlace = false
    var invokedRevealPlaceCount = 0
    var invokedRevealPlaceParameters: (place: PlaceAnnotation, callout: Bool)?
    var invokedRevealPlaceParametersList = [(place: PlaceAnnotation, callout: Bool)]()
    func reveal(place: PlaceAnnotation, callout: Bool) {
        invokedRevealPlace = true
        invokedRevealPlaceCount += 1
        invokedRevealPlaceParameters = (place, callout)
        invokedRevealPlaceParametersList.append((place, callout))
    }
    var invokedShowPlace = false
    var invokedShowPlaceCount = 0
    var invokedShowPlaceParameters: (place: PlaceAnnotation, Void)?
    var invokedShowPlaceParametersList = [(place: PlaceAnnotation, Void)]()
    func show(place: PlaceAnnotation) {
        invokedShowPlace = true
        invokedShowPlaceCount += 1
        invokedShowPlaceParameters = (place, ())
        invokedShowPlaceParametersList.append((place, ()))
    }
    var invokedUpdatePlace = false
    var invokedUpdatePlaceCount = 0
    var invokedUpdatePlaceParameters: (place: PlaceAnnotation, Void)?
    var invokedUpdatePlaceParametersList = [(place: PlaceAnnotation, Void)]()
    func update(place: PlaceAnnotation) {
        invokedUpdatePlace = true
        invokedUpdatePlaceCount += 1
        invokedUpdatePlaceParameters = (place, ())
        invokedUpdatePlaceParametersList.append((place, ()))
    }
}
