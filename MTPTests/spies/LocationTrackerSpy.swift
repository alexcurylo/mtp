// @copyright Trollwerks Inc.

import CoreLocation
@testable import MTP

// generated by https://github.com/seanhenry/SwiftMockGeneratorForXcode
// swiftlint:disable all

final class LocationTrackerSpy: UIViewController, LocationTracker {

    var invokedPresent = false
    override func present(_ viewControllerToPresent: UIViewController,
                          animated flag: Bool,
                          completion: (() -> Void)? = nil) {
        invokedPresent = true
    }

    var invokedAppGetter = false
    var invokedAppGetterCount = 0
    var stubbedApp: ApplicationService!
    var app: ApplicationService {
        invokedAppGetter = true
        invokedAppGetterCount += 1
        return stubbedApp
    }
    var invokedDataGetter = false
    var invokedDataGetterCount = 0
    var stubbedData: DataService!
    var data: DataService {
        invokedDataGetter = true
        invokedDataGetterCount += 1
        return stubbedData
    }
    var invokedLocGetter = false
    var invokedLocGetterCount = 0
    var stubbedLoc: LocationService!
    var loc: LocationService {
        invokedLocGetter = true
        invokedLocGetterCount += 1
        return stubbedLoc
    }
    var invokedLogGetter = false
    var invokedLogGetterCount = 0
    var stubbedLog: LoggingService!
    var log: LoggingService {
        invokedLogGetter = true
        invokedLogGetterCount += 1
        return stubbedLog
    }
    var invokedNetGetter = false
    var invokedNetGetterCount = 0
    var stubbedNet: NetworkService!
    var net: NetworkService {
        invokedNetGetter = true
        invokedNetGetterCount += 1
        return stubbedNet
    }
    var invokedNoteGetter = false
    var invokedNoteGetterCount = 0
    var stubbedNote: NotificationService!
    var note: NotificationService {
        invokedNoteGetter = true
        invokedNoteGetterCount += 1
        return stubbedNote
    }
    var invokedStyleGetter = false
    var invokedStyleGetterCount = 0
    var stubbedStyle: StyleService!
    var style: StyleService {
        invokedStyleGetter = true
        invokedStyleGetterCount += 1
        return stubbedStyle
    }
    var invokedAccessRefused = false
    var invokedAccessRefusedCount = 0
    func accessRefused() {
        invokedAccessRefused = true
        invokedAccessRefusedCount += 1
    }
//    var invokedAlertLocationAccessNeeded = false
//    var invokedAlertLocationAccessNeededCount = 0
//    func alertLocationAccessNeeded() {
//        invokedAlertLocationAccessNeeded = true
//        invokedAlertLocationAccessNeededCount += 1
//    }
    var invokedAuthorization = false
    var invokedAuthorizationCount = 0
    var invokedAuthorizationParameters: (changed: CLAuthorizationStatus, Void)?
    var invokedAuthorizationParametersList = [(changed: CLAuthorizationStatus, Void)]()
    func authorization(changed: CLAuthorizationStatus) {
        invokedAuthorization = true
        invokedAuthorizationCount += 1
        invokedAuthorizationParameters = (changed, ())
        invokedAuthorizationParametersList.append((changed, ()))
    }
    var invokedLocation = false
    var invokedLocationCount = 0
    var invokedLocationParameters: (changed: CLLocation, Void)?
    var invokedLocationParametersList = [(changed: CLLocation, Void)]()
    func location(changed: CLLocation) {
        invokedLocation = true
        invokedLocationCount += 1
        invokedLocationParameters = (changed, ())
        invokedLocationParametersList.append((changed, ()))
    }
    var invokedClose = false
    var invokedCloseCount = 0
    var invokedCloseParameters: (mappable: Mappable, Void)?
    var invokedCloseParametersList = [(mappable: Mappable, Void)]()
    func close(mappable: Mappable) {
        invokedClose = true
        invokedCloseCount += 1
        invokedCloseParameters = (mappable, ())
        invokedCloseParametersList.append((mappable, ()))
    }
    var invokedNotify = false
    var invokedNotifyCount = 0
    var invokedNotifyParameters: (mappable: Mappable, triggered: Date)?
    var invokedNotifyParametersList = [(mappable: Mappable, triggered: Date)]()
    func notify(mappable: Mappable, triggered: Date) {
        invokedNotify = true
        invokedNotifyCount += 1
        invokedNotifyParameters = (mappable, triggered)
        invokedNotifyParametersList.append((mappable, triggered))
    }
    var invokedReveal = false
    var invokedRevealCount = 0
    var invokedRevealParameters: (mappable: Mappable, callout: Bool)?
    var invokedRevealParametersList = [(mappable: Mappable, callout: Bool)]()
    func reveal(mappable: Mappable, callout: Bool) {
        invokedReveal = true
        invokedRevealCount += 1
        invokedRevealParameters = (mappable, callout)
        invokedRevealParametersList.append((mappable, callout))
    }
    var invokedShow = false
    var invokedShowCount = 0
    var invokedShowParameters: (mappable: Mappable, Void)?
    var invokedShowParametersList = [(mappable: Mappable, Void)]()
    func show(mappable: Mappable) {
        invokedShow = true
        invokedShowCount += 1
        invokedShowParameters = (mappable, ())
        invokedShowParametersList.append((mappable, ()))
    }
    var invokedUpdate = false
    var invokedUpdateCount = 0
    var invokedUpdateParameters: (mappable: Mappable, Void)?
    var invokedUpdateParametersList = [(mappable: Mappable, Void)]()
    func update(mappable: Mappable) {
        invokedUpdate = true
        invokedUpdateCount += 1
        invokedUpdateParameters = (mappable, ())
        invokedUpdateParametersList.append((mappable, ()))
    }
}
