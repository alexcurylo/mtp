// @copyright Trollwerks Inc.

import MapKit
@testable import MTP

// generated by https://github.com/seanhenry/SwiftMockGeneratorForXcode
// swiftlint:disable all

final class MappableStub: Mappable {

    var stubbedChecklistValue: Int! = 0
    override var checklistValue: Int {
        set {
        }
        get {
            return stubbedChecklistValue
        }
    }
    var stubbedChecklist: Checklist!
    override var checklist: Checklist {
        set {
        }
        get {
            return stubbedChecklist
        }
    }
    var stubbedChecklistId: Int! = 0
    override var checklistId: Int {
        set {
        }
        get {
            return stubbedChecklistId
        }
    }
    var stubbedCountry: String! = ""
    override var country: String {
        set {
        }
        get {
            return stubbedCountry
        }
    }
    var stubbedImage: String! = ""
    override var image: String {
        set {
        }
        get {
            return stubbedImage
        }
    }
    var stubbedLatitude: CLLocationDegrees!
    override var latitude: CLLocationDegrees {
        set {
        }
        get {
            return stubbedLatitude
        }
    }
    var stubbedLocation: Location!
    override var location: Location? {
        set {
        }
        get {
            return stubbedLocation
        }
    }
    var stubbedLongitude: CLLocationDegrees!
    override var longitude: CLLocationDegrees {
        set {
        }
        get {
            return stubbedLongitude
        }
    }
    var stubbedRegion: String! = ""
    override var region: String {
        set {
        }
        get {
            return stubbedRegion
        }
    }
    var stubbedSubtitle: String! = ""
    override var subtitle: String {
        set {
        }
        get {
            return stubbedSubtitle
        }
    }
    var stubbedTitle: String! = ""
    override var title: String {
        set {
        }
        get {
            return stubbedTitle
        }
    }
    var stubbedVisible: Bool! = false
    override var visible: Bool {
        set {
        }
        get {
            return stubbedVisible
        }
    }
    var stubbedVisitors: Int! = 0
    override var visitors: Int {
        set {
        }
        get {
            return stubbedVisitors
        }
    }
    var stubbedWebsite: String! = ""
    override var website: String {
        set {
        }
        get {
            return stubbedWebsite
        }
    }
    var stubbedDbKey: Key!
    override var dbKey: Key {
        set {
        }
        get {
            return stubbedDbKey
        }
    }
    var stubbedItem: Checklist.Item!
    override var item: Checklist.Item {
        return stubbedItem
    }
    var stubbedCoordinate: CLLocationCoordinate2D!
    override var coordinate: CLLocationCoordinate2D {
        return stubbedCoordinate
    }
    var stubbedIsVisited: Bool! = false
    override var isVisited: Bool {
        return stubbedIsVisited
    }
    var stubbedIsDismissed: Bool! = false
    override var isDismissed: Bool {
        set {
        }
        get {
            return stubbedIsDismissed
        }
    }
    var stubbedCanPost: Bool! = false
    override var canPost: Bool {
        return stubbedCanPost
    }
    var stubbedDistance: CLLocationDistance!
    override var distance: CLLocationDistance {
        return stubbedDistance
    }
    var stubbedReference: Reference!
    override var reference: Reference {
        return stubbedReference
    }
    var stubbedIsHere: Bool! = false
    override var isHere: Bool {
        return stubbedIsHere
    }
    override func reveal(callout: Bool) {
    }
    override func show() {
    }
    override func complete(locationId: Int,
    realm: RealmDataController) {
    }
    override func trigger(distance: CLLocationDistance) {
    }
    var stubbedTriggerContainsResult: Bool! = false
    override func trigger(contains: CLLocationCoordinate2D,
    world: WorldMap) -> Bool {
        return stubbedTriggerContainsResult
    }
    var stubbedIsEqualResult: Bool! = false
    override func isEqual(_ object: Any?) -> Bool {
        return stubbedIsEqualResult
    }
    override func testTriggeredNearby() {
    }
    override func testTrigger(background: Bool) {
    }
}
