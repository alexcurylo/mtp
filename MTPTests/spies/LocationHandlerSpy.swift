// @copyright Trollwerks Inc.

import CoreLocation
@testable import MTP

// generated by https://github.com/seanhenry/SwiftMockGeneratorForXcode
// swiftlint:disable all

final class LocationHandlerSpy: LocationHandler {
    var invokedLocationManagerSetter = false
    var invokedLocationManagerSetterCount = 0
    var invokedLocationManager: CLLocationManager?
    var invokedLocationManagerList = [CLLocationManager]()
    var invokedLocationManagerGetter = false
    var invokedLocationManagerGetterCount = 0
    var stubbedLocationManager = CLLocationManagerSpy()
    override var locationManager: CLLocationManager {
        set {
            invokedLocationManagerSetter = true
            invokedLocationManagerSetterCount += 1
            invokedLocationManager = newValue
            invokedLocationManagerList.append(newValue)
        }
        get {
            invokedLocationManagerGetter = true
            invokedLocationManagerGetterCount += 1
            return stubbedLocationManager
        }
    }
    var invokedLastCoordinateSetter = false
    var invokedLastCoordinateSetterCount = 0
    var invokedLastCoordinate: CLLocation?
    var invokedLastCoordinateList = [CLLocation?]()
    var invokedLastCoordinateGetter = false
    var invokedLastCoordinateGetterCount = 0
    var stubbedLastCoordinate: CLLocation!
    override var lastCoordinate: CLLocation? {
        set {
            invokedLastCoordinateSetter = true
            invokedLastCoordinateSetterCount += 1
            invokedLastCoordinate = newValue
            invokedLastCoordinateList.append(newValue)
        }
        get {
            invokedLastCoordinateGetter = true
            invokedLastCoordinateGetterCount += 1
            return stubbedLastCoordinate
        }
    }
    var invokedLastInsideSetter = false
    var invokedLastInsideSetterCount = 0
    var invokedLastInside: Int?
    var invokedLastInsideList = [Int?]()
    var invokedLastInsideGetter = false
    var invokedLastInsideGetterCount = 0
    var stubbedLastInside: Int!
    override var lastInside: Int? {
        set {
            invokedLastInsideSetter = true
            invokedLastInsideSetterCount += 1
            invokedLastInside = newValue
            invokedLastInsideList.append(newValue)
        }
        get {
            invokedLastInsideGetter = true
            invokedLastInsideGetterCount += 1
            return stubbedLastInside
        }
    }
    var invokedDistancesGetter = false
    var invokedDistancesGetterCount = 0
    var stubbedDistances = Distances()
    override var distances: Distances {
        invokedDistancesGetter = true
        invokedDistancesGetterCount += 1
        return stubbedDistances
    }
    var invokedInsert = false
    var invokedInsertCount = 0
    var invokedInsertParameters: (tracker: Any, Void)?
    var invokedInsertParametersList = [(tracker: Any, Void)]()
    override func insert<T>(tracker: T) where T: LocationTracker, T: Hashable {
        invokedInsert = true
        invokedInsertCount += 1
        invokedInsertParameters = (tracker, ())
        invokedInsertParametersList.append((tracker, ()))
    }
    var invokedRemove = false
    var invokedRemoveCount = 0
    var invokedRemoveParameters: (tracker: Any, Void)?
    var invokedRemoveParametersList = [(tracker: Any, Void)]()
    override func remove<T>(tracker: T) where T: LocationTracker, T: Hashable {
        invokedRemove = true
        invokedRemoveCount += 1
        invokedRemoveParameters = (tracker, ())
        invokedRemoveParametersList.append((tracker, ()))
    }
    var invokedBroadcast = false
    var invokedBroadcastCount = 0
    var stubbedBroadcastThenResult: (LocationTracker, Void)?
    override func broadcast(then: @escaping (LocationTracker) -> Void) {
        invokedBroadcast = true
        invokedBroadcastCount += 1
        if let result = stubbedBroadcastThenResult {
            then(result.0)
        }
    }
    var invokedBroadcastMappable = false
    var invokedBroadcastMappableCount = 0
    var invokedBroadcastMappableParameters: (mappable: Mappable, Void)?
    var invokedBroadcastMappableParametersList = [(mappable: Mappable, Void)]()
    var stubbedBroadcastMappableThenResult: (LocationTracker, Mappable)?
    override func broadcast(mappable: Mappable,
    then: @escaping (LocationTracker, Mappable) -> Void) {
        invokedBroadcastMappable = true
        invokedBroadcastMappableCount += 1
        invokedBroadcastMappableParameters = (mappable, ())
        invokedBroadcastMappableParametersList.append((mappable, ()))
        if let result = stubbedBroadcastMappableThenResult {
            then(result.0, result.1)
        }
    }
    var invokedCalculateDistances = false
    var invokedCalculateDistancesCount = 0
    override func calculateDistances() {
        invokedCalculateDistances = true
        invokedCalculateDistancesCount += 1
    }
}
