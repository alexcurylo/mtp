// @copyright Trollwerks Inc.

@testable import MTP
import RealmSwift

// generated by https://github.com/seanhenry/SwiftMockGeneratorForXcode
// swiftlint:disable all

final class DataServiceSpy: DataService {
    var invokedBeachesGetter = false
    var invokedBeachesGetterCount = 0
    var stubbedBeaches: [Beach]! = []
    var beaches: [Beach] {
        invokedBeachesGetter = true
        invokedBeachesGetterCount += 1
        return stubbedBeaches
    }
    var invokedBrandsGetter = false
    var invokedBrandsGetterCount = 0
    var stubbedBrands: [String: String]! = [:]
    var brands: [String: String] {
        invokedBrandsGetter = true
        invokedBrandsGetterCount += 1
        return stubbedBrands
    }
    var invokedBlockedPhotosSetter = false
    var invokedBlockedPhotosSetterCount = 0
    var invokedBlockedPhotos: [Int]?
    var invokedBlockedPhotosList = [[Int]]()
    var invokedBlockedPhotosGetter = false
    var invokedBlockedPhotosGetterCount = 0
    var stubbedBlockedPhotos: [Int]! = []
    var blockedPhotos: [Int] {
        set {
            invokedBlockedPhotosSetter = true
            invokedBlockedPhotosSetterCount += 1
            invokedBlockedPhotos = newValue
            invokedBlockedPhotosList.append(newValue)
        }
        get {
            invokedBlockedPhotosGetter = true
            invokedBlockedPhotosGetterCount += 1
            return stubbedBlockedPhotos
        }
    }
    var invokedBlockedPostsSetter = false
    var invokedBlockedPostsSetterCount = 0
    var invokedBlockedPosts: [Int]?
    var invokedBlockedPostsList = [[Int]]()
    var invokedBlockedPostsGetter = false
    var invokedBlockedPostsGetterCount = 0
    var stubbedBlockedPosts: [Int]! = []
    var blockedPosts: [Int] {
        set {
            invokedBlockedPostsSetter = true
            invokedBlockedPostsSetterCount += 1
            invokedBlockedPosts = newValue
            invokedBlockedPostsList.append(newValue)
        }
        get {
            invokedBlockedPostsGetter = true
            invokedBlockedPostsGetterCount += 1
            return stubbedBlockedPosts
        }
    }
    var invokedBlockedUsersSetter = false
    var invokedBlockedUsersSetterCount = 0
    var invokedBlockedUsers: [Int]?
    var invokedBlockedUsersList = [[Int]]()
    var invokedBlockedUsersGetter = false
    var invokedBlockedUsersGetterCount = 0
    var stubbedBlockedUsers: [Int]! = []
    var blockedUsers: [Int] {
        set {
            invokedBlockedUsersSetter = true
            invokedBlockedUsersSetterCount += 1
            invokedBlockedUsers = newValue
            invokedBlockedUsersList.append(newValue)
        }
        get {
            invokedBlockedUsersGetter = true
            invokedBlockedUsersGetterCount += 1
            return stubbedBlockedUsers
        }
    }
    var invokedCountriesGetter = false
    var invokedCountriesGetterCount = 0
    var stubbedCountries: [Country]! = []
    var countries: [Country] {
        invokedCountriesGetter = true
        invokedCountriesGetterCount += 1
        return stubbedCountries
    }
    var invokedDivesitesGetter = false
    var invokedDivesitesGetterCount = 0
    var stubbedDivesites: [DiveSite]! = []
    var divesites: [DiveSite] {
        invokedDivesitesGetter = true
        invokedDivesitesGetterCount += 1
        return stubbedDivesites
    }
    var invokedDismissedSetter = false
    var invokedDismissedSetterCount = 0
    var invokedDismissed: Timestamps?
    var invokedDismissedList = [Timestamps?]()
    var invokedDismissedGetter = false
    var invokedDismissedGetterCount = 0
    var stubbedDismissed: Timestamps!
    var dismissed: Timestamps? {
        set {
            invokedDismissedSetter = true
            invokedDismissedSetterCount += 1
            invokedDismissed = newValue
            invokedDismissedList.append(newValue)
        }
        get {
            invokedDismissedGetter = true
            invokedDismissedGetterCount += 1
            return stubbedDismissed
        }
    }
    var invokedEmailSetter = false
    var invokedEmailSetterCount = 0
    var invokedEmail: String?
    var invokedEmailList = [String]()
    var invokedEmailGetter = false
    var invokedEmailGetterCount = 0
    var stubbedEmail: String! = ""
    var email: String {
        set {
            invokedEmailSetter = true
            invokedEmailSetterCount += 1
            invokedEmail = newValue
            invokedEmailList.append(newValue)
        }
        get {
            invokedEmailGetter = true
            invokedEmailGetterCount += 1
            return stubbedEmail
        }
    }
    var invokedFixedSetter = false
    var invokedFixedSetterCount = 0
    var invokedFixed: String?
    var invokedFixedList = [String]()
    var invokedFixedGetter = false
    var invokedFixedGetterCount = 0
    var stubbedFixed: String! = ""
    var fixed: String {
        set {
            invokedFixedSetter = true
            invokedFixedSetterCount += 1
            invokedFixed = newValue
            invokedFixedList.append(newValue)
        }
        get {
            invokedFixedGetter = true
            invokedFixedGetterCount += 1
            return stubbedFixed
        }
    }
    var invokedEtagsSetter = false
    var invokedEtagsSetterCount = 0
    var invokedEtags: [String: String]?
    var invokedEtagsList = [[String: String]]()
    var invokedEtagsGetter = false
    var invokedEtagsGetterCount = 0
    var stubbedEtags: [String: String]! = [:]
    var etags: [String: String] {
        set {
            invokedEtagsSetter = true
            invokedEtagsSetterCount += 1
            invokedEtags = newValue
            invokedEtagsList.append(newValue)
        }
        get {
            invokedEtagsGetter = true
            invokedEtagsGetterCount += 1
            return stubbedEtags
        }
    }
    var invokedGolfcoursesGetter = false
    var invokedGolfcoursesGetterCount = 0
    var stubbedGolfcourses: [GolfCourse]! = []
    var golfcourses: [GolfCourse] {
        invokedGolfcoursesGetter = true
        invokedGolfcoursesGetterCount += 1
        return stubbedGolfcourses
    }
    var invokedHotelsGetter = false
    var invokedHotelsGetterCount = 0
    var stubbedHotels: [Hotel]! = []
    var hotels: [Hotel] {
        invokedHotelsGetter = true
        invokedHotelsGetterCount += 1
        return stubbedHotels
    }
    var invokedHotelsGroupBrandSetter = false
    var invokedHotelsGroupBrandSetterCount = 0
    var invokedHotelsGroupBrand: Bool?
    var invokedHotelsGroupBrandList = [Bool]()
    var invokedHotelsGroupBrandGetter = false
    var invokedHotelsGroupBrandGetterCount = 0
    var stubbedHotelsGroupBrand: Bool! = false
    var hotelsGroupBrand: Bool {
        set {
            invokedHotelsGroupBrandSetter = true
            invokedHotelsGroupBrandSetterCount += 1
            invokedHotelsGroupBrand = newValue
            invokedHotelsGroupBrandList.append(newValue)
        }
        get {
            invokedHotelsGroupBrandGetter = true
            invokedHotelsGroupBrandGetterCount += 1
            return stubbedHotelsGroupBrand
        }
    }
    var invokedLastRankingsQuerySetter = false
    var invokedLastRankingsQuerySetterCount = 0
    var invokedLastRankingsQuery: RankingsQuery?
    var invokedLastRankingsQueryList = [RankingsQuery]()
    var invokedLastRankingsQueryGetter = false
    var invokedLastRankingsQueryGetterCount = 0
    var stubbedLastRankingsQuery: RankingsQuery!
    var lastRankingsQuery: RankingsQuery {
        set {
            invokedLastRankingsQuerySetter = true
            invokedLastRankingsQuerySetterCount += 1
            invokedLastRankingsQuery = newValue
            invokedLastRankingsQueryList.append(newValue)
        }
        get {
            invokedLastRankingsQueryGetter = true
            invokedLastRankingsQueryGetterCount += 1
            return stubbedLastRankingsQuery
        }
    }
    var invokedLocationsGetter = false
    var invokedLocationsGetterCount = 0
    var stubbedLocations: [Location]! = []
    var locations: [Location] {
        invokedLocationsGetter = true
        invokedLocationsGetterCount += 1
        return stubbedLocations
    }
    var invokedMapDisplaySetter = false
    var invokedMapDisplaySetterCount = 0
    var invokedMapDisplay: ChecklistFlags?
    var invokedMapDisplayList = [ChecklistFlags]()
    var invokedMapDisplayGetter = false
    var invokedMapDisplayGetterCount = 0
    var stubbedMapDisplay: ChecklistFlags!
    var mapDisplay: ChecklistFlags {
        set {
            invokedMapDisplaySetter = true
            invokedMapDisplaySetterCount += 1
            invokedMapDisplay = newValue
            invokedMapDisplayList.append(newValue)
        }
        get {
            invokedMapDisplayGetter = true
            invokedMapDisplayGetterCount += 1
            return stubbedMapDisplay
        }
    }
    var invokedVisiblesGetter = false
    var invokedVisiblesGetterCount = 0
    var stubbedVisibles: [Mappable]! = []
    var visibles: [Mappable] {
        invokedVisiblesGetter = true
        invokedVisiblesGetterCount += 1
        return stubbedVisibles
    }
    var invokedNotifiedSetter = false
    var invokedNotifiedSetterCount = 0
    var invokedNotified: Timestamps?
    var invokedNotifiedList = [Timestamps?]()
    var invokedNotifiedGetter = false
    var invokedNotifiedGetterCount = 0
    var stubbedNotified: Timestamps!
    var notified: Timestamps? {
        set {
            invokedNotifiedSetter = true
            invokedNotifiedSetterCount += 1
            invokedNotified = newValue
            invokedNotifiedList.append(newValue)
        }
        get {
            invokedNotifiedGetter = true
            invokedNotifiedGetterCount += 1
            return stubbedNotified
        }
    }
    var invokedRestaurantsGetter = false
    var invokedRestaurantsGetterCount = 0
    var stubbedRestaurants: [Restaurant]! = []
    var restaurants: [Restaurant] {
        invokedRestaurantsGetter = true
        invokedRestaurantsGetterCount += 1
        return stubbedRestaurants
    }
    var invokedTokenSetter = false
    var invokedTokenSetterCount = 0
    var invokedToken: String?
    var invokedTokenList = [String]()
    var invokedTokenGetter = false
    var invokedTokenGetterCount = 0
    var stubbedToken: String! = ""
    var token: String {
        set {
            invokedTokenSetter = true
            invokedTokenSetterCount += 1
            invokedToken = newValue
            invokedTokenList.append(newValue)
        }
        get {
            invokedTokenGetter = true
            invokedTokenGetterCount += 1
            return stubbedToken
        }
    }
    var invokedTriggeredSetter = false
    var invokedTriggeredSetterCount = 0
    var invokedTriggered: Timestamps?
    var invokedTriggeredList = [Timestamps?]()
    var invokedTriggeredGetter = false
    var invokedTriggeredGetterCount = 0
    var stubbedTriggered: Timestamps!
    var triggered: Timestamps? {
        set {
            invokedTriggeredSetter = true
            invokedTriggeredSetterCount += 1
            invokedTriggered = newValue
            invokedTriggeredList.append(newValue)
        }
        get {
            invokedTriggeredGetter = true
            invokedTriggeredGetterCount += 1
            return stubbedTriggered
        }
    }
    var invokedUncountriesGetter = false
    var invokedUncountriesGetterCount = 0
    var stubbedUncountries: [UNCountry]! = []
    var uncountries: [UNCountry] {
        invokedUncountriesGetter = true
        invokedUncountriesGetterCount += 1
        return stubbedUncountries
    }
    var invokedUpdatedSetter = false
    var invokedUpdatedSetterCount = 0
    var invokedUpdated: Timestamps?
    var invokedUpdatedList = [Timestamps?]()
    var invokedUpdatedGetter = false
    var invokedUpdatedGetterCount = 0
    var stubbedUpdated: Timestamps!
    var updated: Timestamps? {
        set {
            invokedUpdatedSetter = true
            invokedUpdatedSetterCount += 1
            invokedUpdated = newValue
            invokedUpdatedList.append(newValue)
        }
        get {
            invokedUpdatedGetter = true
            invokedUpdatedGetterCount += 1
            return stubbedUpdated
        }
    }
    var invokedUserSetter = false
    var invokedUserSetterCount = 0
    var invokedUser: UserJSON?
    var invokedUserList = [UserJSON?]()
    var invokedUserGetter = false
    var invokedUserGetterCount = 0
    var stubbedUser: UserJSON!
    var user: UserJSON? {
        set {
            invokedUserSetter = true
            invokedUserSetterCount += 1
            invokedUser = newValue
            invokedUserList.append(newValue)
        }
        get {
            invokedUserGetter = true
            invokedUserGetterCount += 1
            return stubbedUser
        }
    }
    var invokedVisitedSetter = false
    var invokedVisitedSetterCount = 0
    var invokedVisited: Checked?
    var invokedVisitedList = [Checked?]()
    var invokedVisitedGetter = false
    var invokedVisitedGetterCount = 0
    var stubbedVisited: Checked!
    var visited: Checked? {
        set {
            invokedVisitedSetter = true
            invokedVisitedSetterCount += 1
            invokedVisited = newValue
            invokedVisitedList.append(newValue)
        }
        get {
            invokedVisitedGetter = true
            invokedVisitedGetterCount += 1
            return stubbedVisited
        }
    }
    var invokedWhssGetter = false
    var invokedWhssGetterCount = 0
    var stubbedWhss: [WHS]! = []
    var whss: [WHS] {
        invokedWhssGetter = true
        invokedWhssGetterCount += 1
        return stubbedWhss
    }
    var invokedWorldMapGetter = false
    var invokedWorldMapGetterCount = 0
    var stubbedWorldMap: WorldMap!
    var worldMap: WorldMap {
        invokedWorldMapGetter = true
        invokedWorldMapGetterCount += 1
        return stubbedWorldMap
    }
    var invokedStatusKeyGetter = false
    var invokedStatusKeyGetterCount = 0
    var stubbedStatusKey: StatusKey!
    var statusKey: StatusKey {
        invokedStatusKeyGetter = true
        invokedStatusKeyGetterCount += 1
        return stubbedStatusKey
    }
    var invokedNotificationGetter = false
    var invokedNotificationGetterCount = 0
    var stubbedNotification: Notification.Name!
    var notification: Notification.Name {
        invokedNotificationGetter = true
        invokedNotificationGetterCount += 1
        return stubbedNotification
    }
    var invokedAppGetter = false
    var invokedAppGetterCount = 0
    var stubbedApp: ApplicationService!
    var app: ApplicationService {
        invokedAppGetter = true
        invokedAppGetterCount += 1
        return stubbedApp
    }
    var invokedDataGetter = false
    var invokedDataGetterCount = 0
    var stubbedData: DataService!
    var data: DataService {
        invokedDataGetter = true
        invokedDataGetterCount += 1
        return stubbedData
    }
    var invokedLocGetter = false
    var invokedLocGetterCount = 0
    var stubbedLoc: LocationService!
    var loc: LocationService {
        invokedLocGetter = true
        invokedLocGetterCount += 1
        return stubbedLoc
    }
    var invokedLogGetter = false
    var invokedLogGetterCount = 0
    var stubbedLog: LoggingService!
    var log: LoggingService {
        invokedLogGetter = true
        invokedLogGetterCount += 1
        return stubbedLog
    }
    var invokedNetGetter = false
    var invokedNetGetterCount = 0
    var stubbedNet: NetworkService!
    var net: NetworkService {
        invokedNetGetter = true
        invokedNetGetterCount += 1
        return stubbedNet
    }
    var invokedNoteGetter = false
    var invokedNoteGetterCount = 0
    var stubbedNote: NotificationService!
    var note: NotificationService {
        invokedNoteGetter = true
        invokedNoteGetterCount += 1
        return stubbedNote
    }
    var invokedReportGetter = false
    var invokedReportGetterCount = 0
    var stubbedReport: ReportingService!
    var report: ReportingService {
        invokedReportGetter = true
        invokedReportGetterCount += 1
        return stubbedReport
    }
    var invokedStyleGetter = false
    var invokedStyleGetterCount = 0
    var stubbedStyle: StyleService!
    var style: StyleService {
        invokedStyleGetter = true
        invokedStyleGetterCount += 1
        return stubbedStyle
    }
    var invokedBlockPhoto = false
    var invokedBlockPhotoCount = 0
    var invokedBlockPhotoParameters: (id: Int, Void)?
    var invokedBlockPhotoParametersList = [(id: Int, Void)]()
    func block(photo id: Int) {
        invokedBlockPhoto = true
        invokedBlockPhotoCount += 1
        invokedBlockPhotoParameters = (id, ())
        invokedBlockPhotoParametersList.append((id, ()))
    }
    var invokedBlockPost = false
    var invokedBlockPostCount = 0
    var invokedBlockPostParameters: (id: Int, Void)?
    var invokedBlockPostParametersList = [(id: Int, Void)]()
    func block(post id: Int) {
        invokedBlockPost = true
        invokedBlockPostCount += 1
        invokedBlockPostParameters = (id, ())
        invokedBlockPostParametersList.append((id, ()))
    }
    var invokedBlockUser = false
    var invokedBlockUserCount = 0
    var invokedBlockUserParameters: (id: Int, Void)?
    var invokedBlockUserParametersList = [(id: Int, Void)]()
    var stubbedBlockUserResult: Bool! = false
    func block(user id: Int) -> Bool {
        invokedBlockUser = true
        invokedBlockUserCount += 1
        invokedBlockUserParameters = (id, ())
        invokedBlockUserParametersList.append((id, ()))
        return stubbedBlockUserResult
    }
    var invokedGetCountry = false
    var invokedGetCountryCount = 0
    var invokedGetCountryParameters: (id: Int?, Void)?
    var invokedGetCountryParametersList = [(id: Int?, Void)]()
    var stubbedGetCountryResult: Country!
    func get(country id: Int?) -> Country? {
        invokedGetCountry = true
        invokedGetCountryCount += 1
        invokedGetCountryParameters = (id, ())
        invokedGetCountryParametersList.append((id, ()))
        return stubbedGetCountryResult
    }
    var invokedGetLocation = false
    var invokedGetLocationCount = 0
    var invokedGetLocationParameters: (id: Int?, Void)?
    var invokedGetLocationParametersList = [(id: Int?, Void)]()
    var stubbedGetLocationResult: Location!
    func get(location id: Int?) -> Location? {
        invokedGetLocation = true
        invokedGetLocationCount += 1
        invokedGetLocationParameters = (id, ())
        invokedGetLocationParametersList.append((id, ()))
        return stubbedGetLocationResult
    }
    var invokedGetLocationPhotos = false
    var invokedGetLocationPhotosCount = 0
    var invokedGetLocationPhotosParameters: (id: Int, Void)?
    var invokedGetLocationPhotosParametersList = [(id: Int, Void)]()
    var stubbedGetLocationPhotosResult: [Photo]! = []
    func get(locationPhotos id: Int) -> [Photo] {
        invokedGetLocationPhotos = true
        invokedGetLocationPhotosCount += 1
        invokedGetLocationPhotosParameters = (id, ())
        invokedGetLocationPhotosParametersList.append((id, ()))
        return stubbedGetLocationPhotosResult
    }
    var invokedGetLocationPosts = false
    var invokedGetLocationPostsCount = 0
    var invokedGetLocationPostsParameters: (id: Int, Void)?
    var invokedGetLocationPostsParametersList = [(id: Int, Void)]()
    var stubbedGetLocationPostsResult: [Post]! = []
    func get(locationPosts id: Int) -> [Post] {
        invokedGetLocationPosts = true
        invokedGetLocationPostsCount += 1
        invokedGetLocationPostsParameters = (id, ())
        invokedGetLocationPostsParametersList.append((id, ()))
        return stubbedGetLocationPostsResult
    }
    var invokedGetLocations = false
    var invokedGetLocationsCount = 0
    var invokedGetLocationsParameters: (filter: String, Void)?
    var invokedGetLocationsParametersList = [(filter: String, Void)]()
    var stubbedGetLocationsResult: [Location]! = []
    func get(locations filter: String) -> [Location] {
        invokedGetLocations = true
        invokedGetLocationsCount += 1
        invokedGetLocationsParameters = (filter, ())
        invokedGetLocationsParametersList.append((filter, ()))
        return stubbedGetLocationsResult
    }
    var invokedGetMappable = false
    var invokedGetMappableCount = 0
    var invokedGetMappableParameters: (item: Checklist.Item, Void)?
    var invokedGetMappableParametersList = [(item: Checklist.Item, Void)]()
    var stubbedGetMappableResult: Mappable!
    func get(mappable item: Checklist.Item) -> Mappable? {
        invokedGetMappable = true
        invokedGetMappableCount += 1
        invokedGetMappableParameters = (item, ())
        invokedGetMappableParametersList.append((item, ()))
        return stubbedGetMappableResult
    }
    var invokedGetVisible = false
    var invokedGetVisibleCount = 0
    var invokedGetVisibleParameters: (item: Checklist.Item, Void)?
    var invokedGetVisibleParametersList = [(item: Checklist.Item, Void)]()
    var stubbedGetVisibleResult: Mappable!
    func get(visible item: Checklist.Item) -> Mappable? {
        invokedGetVisible = true
        invokedGetVisibleCount += 1
        invokedGetVisibleParameters = (item, ())
        invokedGetVisibleParametersList.append((item, ()))
        return stubbedGetVisibleResult
    }
    var invokedGetVisiblesChecklist = false
    var invokedGetVisiblesChecklistCount = 0
    var invokedGetVisiblesChecklistParameters: (list: Checklist, Void)?
    var invokedGetVisiblesChecklistParametersList = [(list: Checklist, Void)]()
    var stubbedGetVisiblesChecklistResult: [Mappable]! = []
    func get(visibles list: Checklist) -> [Mappable] {
        invokedGetVisiblesChecklist = true
        invokedGetVisiblesChecklistCount += 1
        invokedGetVisiblesChecklistParameters = (list, ())
        invokedGetVisiblesChecklistParametersList.append((list, ()))
        return stubbedGetVisiblesChecklistResult
    }
    var invokedGetVisiblesString = false
    var invokedGetVisiblesStringCount = 0
    var invokedGetVisiblesStringParameters: (matching: String, Void)?
    var invokedGetVisiblesStringParametersList = [(matching: String, Void)]()
    var stubbedGetVisiblesStringResult: [Mappable]! = []
    func get(visibles matching: String) -> [Mappable] {
        invokedGetVisiblesString = true
        invokedGetVisiblesStringCount += 1
        invokedGetVisiblesStringParameters = (matching, ())
        invokedGetVisiblesStringParametersList.append((matching, ()))
        return stubbedGetVisiblesStringResult
    }
    var invokedGetMilestones = false
    var invokedGetMilestonesCount = 0
    var invokedGetMilestonesParameters: (list: Checklist, Void)?
    var invokedGetMilestonesParametersList = [(list: Checklist, Void)]()
    var stubbedGetMilestonesResult: Milestones!
    func get(milestones list: Checklist) -> Milestones? {
        invokedGetMilestones = true
        invokedGetMilestonesCount += 1
        invokedGetMilestonesParameters = (list, ())
        invokedGetMilestonesParametersList.append((list, ()))
        return stubbedGetMilestonesResult
    }
    var invokedGetPhotosPages = false
    var invokedGetPhotosPagesCount = 0
    var invokedGetPhotosPagesParameters: (id: Int, Void)?
    var invokedGetPhotosPagesParametersList = [(id: Int, Void)]()
    var stubbedGetPhotosPagesResult: Results<PhotosPageInfo>!
    func getPhotosPages(user id: Int) -> Results<PhotosPageInfo> {
        invokedGetPhotosPages = true
        invokedGetPhotosPagesCount += 1
        invokedGetPhotosPagesParameters = (id, ())
        invokedGetPhotosPagesParametersList.append((id, ()))
        return stubbedGetPhotosPagesResult
    }
    var invokedGetPhoto = false
    var invokedGetPhotoCount = 0
    var invokedGetPhotoParameters: (photo: Int, Void)?
    var invokedGetPhotoParametersList = [(photo: Int, Void)]()
    var stubbedGetPhotoResult: Photo!
    func get(photo: Int) -> Photo {
        invokedGetPhoto = true
        invokedGetPhotoCount += 1
        invokedGetPhotoParameters = (photo, ())
        invokedGetPhotoParametersList.append((photo, ()))
        return stubbedGetPhotoResult
    }
    var invokedGetPost = false
    var invokedGetPostCount = 0
    var invokedGetPostParameters: (post: Int, Void)?
    var invokedGetPostParametersList = [(post: Int, Void)]()
    var stubbedGetPostResult: Post!
    func get(post: Int) -> Post? {
        invokedGetPost = true
        invokedGetPostCount += 1
        invokedGetPostParameters = (post, ())
        invokedGetPostParametersList.append((post, ()))
        return stubbedGetPostResult
    }
    var invokedGetPosts = false
    var invokedGetPostsCount = 0
    var invokedGetPostsParameters: (id: Int, Void)?
    var invokedGetPostsParametersList = [(id: Int, Void)]()
    var stubbedGetPostsResult: [Post]! = []
    func getPosts(user id: Int) -> [Post] {
        invokedGetPosts = true
        invokedGetPostsCount += 1
        invokedGetPostsParameters = (id, ())
        invokedGetPostsParametersList.append((id, ()))
        return stubbedGetPostsResult
    }
    var invokedGetUserPhotos = false
    var invokedGetUserPhotosCount = 0
    var invokedGetUserPhotosParameters: (id: Int, location: Int?)?
    var invokedGetUserPhotosParametersList = [(id: Int, location: Int?)]()
    var stubbedGetUserPhotosResult: [Photo]! = []
    func get(user id: Int,
    photos location: Int?) -> [Photo] {
        invokedGetUserPhotos = true
        invokedGetUserPhotosCount += 1
        invokedGetUserPhotosParameters = (id, location)
        invokedGetUserPhotosParametersList.append((id, location))
        return stubbedGetUserPhotosResult
    }
    var invokedGetRankings = false
    var invokedGetRankingsCount = 0
    var invokedGetRankingsParameters: (query: RankingsQuery, Void)?
    var invokedGetRankingsParametersList = [(query: RankingsQuery, Void)]()
    var stubbedGetRankingsResult: Results<RankingsPageInfo>!
    func get(rankings query: RankingsQuery) -> Results<RankingsPageInfo> {
        invokedGetRankings = true
        invokedGetRankingsCount += 1
        invokedGetRankingsParameters = (query, ())
        invokedGetRankingsParametersList.append((query, ()))
        return stubbedGetRankingsResult
    }
    var invokedGetScorecard = false
    var invokedGetScorecardCount = 0
    var invokedGetScorecardParameters: (list: Checklist, id: Int?)?
    var invokedGetScorecardParametersList = [(list: Checklist, id: Int?)]()
    var stubbedGetScorecardResult: Scorecard!
    func get(scorecard list: Checklist,
    user id: Int?) -> Scorecard? {
        invokedGetScorecard = true
        invokedGetScorecardCount += 1
        invokedGetScorecardParameters = (list, id)
        invokedGetScorecardParametersList.append((list, id))
        return stubbedGetScorecardResult
    }
    var invokedGetUser = false
    var invokedGetUserCount = 0
    var invokedGetUserParameters: (id: Int, Void)?
    var invokedGetUserParametersList = [(id: Int, Void)]()
    var stubbedGetUserResult: User!
    func get(user id: Int) -> User? {
        invokedGetUser = true
        invokedGetUserCount += 1
        invokedGetUserParameters = (id, ())
        invokedGetUserParametersList.append((id, ()))
        return stubbedGetUserResult
    }
    var invokedGetWhs = false
    var invokedGetWhsCount = 0
    var invokedGetWhsParameters: (id: Int, Void)?
    var invokedGetWhsParametersList = [(id: Int, Void)]()
    var stubbedGetWhsResult: WHS!
    func get(whs id: Int) -> WHS? {
        invokedGetWhs = true
        invokedGetWhsCount += 1
        invokedGetWhsParameters = (id, ())
        invokedGetWhsParametersList.append((id, ()))
        return stubbedGetWhsResult
    }
    var invokedHasChildren = false
    var invokedHasChildrenCount = 0
    var invokedHasChildrenParameters: (id: Int, Void)?
    var invokedHasChildrenParametersList = [(id: Int, Void)]()
    var stubbedHasChildrenResult: Bool! = false
    func hasChildren(whs id: Int) -> Bool {
        invokedHasChildren = true
        invokedHasChildrenCount += 1
        invokedHasChildrenParameters = (id, ())
        invokedHasChildrenParametersList.append((id, ()))
        return stubbedHasChildrenResult
    }
    var invokedVisitedChildren = false
    var invokedVisitedChildrenCount = 0
    var invokedVisitedChildrenParameters: (id: Int, Void)?
    var invokedVisitedChildrenParametersList = [(id: Int, Void)]()
    var stubbedVisitedChildrenResult: [WHS]! = []
    func visitedChildren(whs id: Int) -> [WHS] {
        invokedVisitedChildren = true
        invokedVisitedChildrenCount += 1
        invokedVisitedChildrenParameters = (id, ())
        invokedVisitedChildrenParametersList.append((id, ()))
        return stubbedVisitedChildrenResult
    }
    var invokedSetBeaches = false
    var invokedSetBeachesCount = 0
    var invokedSetBeachesParameters: (beaches: [PlaceJSON], Void)?
    var invokedSetBeachesParametersList = [(beaches: [PlaceJSON], Void)]()
    func set(beaches: [PlaceJSON]) {
        invokedSetBeaches = true
        invokedSetBeachesCount += 1
        invokedSetBeachesParameters = (beaches, ())
        invokedSetBeachesParametersList.append((beaches, ()))
    }
    var invokedSetBrands = false
    var invokedSetBrandsCount = 0
    var invokedSetBrandsParameters: (brands: [BrandJSON], Void)?
    var invokedSetBrandsParametersList = [(brands: [BrandJSON], Void)]()
    func set(brands: [BrandJSON]) {
        invokedSetBrands = true
        invokedSetBrandsCount += 1
        invokedSetBrandsParameters = (brands, ())
        invokedSetBrandsParametersList.append((brands, ()))
    }
    var invokedSetCountries = false
    var invokedSetCountriesCount = 0
    var invokedSetCountriesParameters: (countries: [CountryJSON], Void)?
    var invokedSetCountriesParametersList = [(countries: [CountryJSON], Void)]()
    func set(countries: [CountryJSON]) {
        invokedSetCountries = true
        invokedSetCountriesCount += 1
        invokedSetCountriesParameters = (countries, ())
        invokedSetCountriesParametersList.append((countries, ()))
    }
    var invokedSetDivesites = false
    var invokedSetDivesitesCount = 0
    var invokedSetDivesitesParameters: (divesites: [PlaceJSON], Void)?
    var invokedSetDivesitesParametersList = [(divesites: [PlaceJSON], Void)]()
    func set(divesites: [PlaceJSON]) {
        invokedSetDivesites = true
        invokedSetDivesitesCount += 1
        invokedSetDivesitesParameters = (divesites, ())
        invokedSetDivesitesParametersList.append((divesites, ()))
    }
    var invokedSetGolfcourses = false
    var invokedSetGolfcoursesCount = 0
    var invokedSetGolfcoursesParameters: (golfcourses: [PlaceJSON], Void)?
    var invokedSetGolfcoursesParametersList = [(golfcourses: [PlaceJSON], Void)]()
    func set(golfcourses: [PlaceJSON]) {
        invokedSetGolfcourses = true
        invokedSetGolfcoursesCount += 1
        invokedSetGolfcoursesParameters = (golfcourses, ())
        invokedSetGolfcoursesParametersList.append((golfcourses, ()))
    }
    var invokedSetHotels = false
    var invokedSetHotelsCount = 0
    var invokedSetHotelsParameters: (hotels: [HotelJSON], Void)?
    var invokedSetHotelsParametersList = [(hotels: [HotelJSON], Void)]()
    func set(hotels: [HotelJSON]) {
        invokedSetHotels = true
        invokedSetHotelsCount += 1
        invokedSetHotelsParameters = (hotels, ())
        invokedSetHotelsParametersList.append((hotels, ()))
    }
    var invokedSetItems = false
    var invokedSetItemsCount = 0
    var invokedSetItemsParameters: (items: [Checklist.Item], visited: Bool)?
    var invokedSetItemsParametersList = [(items: [Checklist.Item], visited: Bool)]()
    func set(items: [Checklist.Item],
    visited: Bool) {
        invokedSetItems = true
        invokedSetItemsCount += 1
        invokedSetItemsParameters = (items, visited)
        invokedSetItemsParametersList.append((items, visited))
    }
    var invokedSetLocations = false
    var invokedSetLocationsCount = 0
    var invokedSetLocationsParameters: (locations: [LocationJSON], Void)?
    var invokedSetLocationsParametersList = [(locations: [LocationJSON], Void)]()
    func set(locations: [LocationJSON]) {
        invokedSetLocations = true
        invokedSetLocationsCount += 1
        invokedSetLocationsParameters = (locations, ())
        invokedSetLocationsParametersList.append((locations, ()))
    }
    var invokedSetLocationPhotos = false
    var invokedSetLocationPhotosCount = 0
    var invokedSetLocationPhotosParameters: (id: Int, photos: PhotosInfoJSON)?
    var invokedSetLocationPhotosParametersList = [(id: Int, photos: PhotosInfoJSON)]()
    func set(location id: Int,
    photos: PhotosInfoJSON) {
        invokedSetLocationPhotos = true
        invokedSetLocationPhotosCount += 1
        invokedSetLocationPhotosParameters = (id, photos)
        invokedSetLocationPhotosParametersList.append((id, photos))
    }
    var invokedSetLocationPosts = false
    var invokedSetLocationPostsCount = 0
    var invokedSetLocationPostsParameters: (id: Int, posts: [PostJSON])?
    var invokedSetLocationPostsParametersList = [(id: Int, posts: [PostJSON])]()
    func set(location id: Int,
    posts: [PostJSON]) {
        invokedSetLocationPosts = true
        invokedSetLocationPostsCount += 1
        invokedSetLocationPostsParameters = (id, posts)
        invokedSetLocationPostsParametersList.append((id, posts))
    }
    var invokedSetMilestones = false
    var invokedSetMilestonesCount = 0
    var invokedSetMilestonesParameters: (milestones: SettingsJSON, Void)?
    var invokedSetMilestonesParametersList = [(milestones: SettingsJSON, Void)]()
    func set(milestones: SettingsJSON) {
        invokedSetMilestones = true
        invokedSetMilestonesCount += 1
        invokedSetMilestonesParameters = (milestones, ())
        invokedSetMilestonesParametersList.append((milestones, ()))
    }
    var invokedSetPhoto = false
    var invokedSetPhotoCount = 0
    var invokedSetPhotoParameters: (photo: PhotoReply, Void)?
    var invokedSetPhotoParametersList = [(photo: PhotoReply, Void)]()
    func set(photo: PhotoReply) {
        invokedSetPhoto = true
        invokedSetPhotoCount += 1
        invokedSetPhotoParameters = (photo, ())
        invokedSetPhotoParametersList.append((photo, ()))
    }
    var invokedSetPhotos = false
    var invokedSetPhotosCount = 0
    var invokedSetPhotosParameters: (page: Int, id: Int, info: PhotosPageInfoJSON)?
    var invokedSetPhotosParametersList = [(page: Int, id: Int, info: PhotosPageInfoJSON)]()
    func set(photos page: Int,
    user id: Int,
    info: PhotosPageInfoJSON) {
        invokedSetPhotos = true
        invokedSetPhotosCount += 1
        invokedSetPhotosParameters = (page, id, info)
        invokedSetPhotosParametersList.append((page, id, info))
    }
    var invokedSetPost = false
    var invokedSetPostCount = 0
    var invokedSetPostParameters: (post: PostReply, Void)?
    var invokedSetPostParametersList = [(post: PostReply, Void)]()
    func set(post: PostReply) {
        invokedSetPost = true
        invokedSetPostCount += 1
        invokedSetPostParameters = (post, ())
        invokedSetPostParametersList.append((post, ()))
    }
    var invokedSetPosts = false
    var invokedSetPostsCount = 0
    var invokedSetPostsParameters: (posts: [PostJSON], Void)?
    var invokedSetPostsParametersList = [(posts: [PostJSON], Void)]()
    func set(posts: [PostJSON]) {
        invokedSetPosts = true
        invokedSetPostsCount += 1
        invokedSetPostsParameters = (posts, ())
        invokedSetPostsParametersList.append((posts, ()))
    }
    var invokedSetRestaurants = false
    var invokedSetRestaurantsCount = 0
    var invokedSetRestaurantsParameters: (restaurants: [RestaurantJSON], Void)?
    var invokedSetRestaurantsParametersList = [(restaurants: [RestaurantJSON], Void)]()
    func set(restaurants: [RestaurantJSON]) {
        invokedSetRestaurants = true
        invokedSetRestaurantsCount += 1
        invokedSetRestaurantsParameters = (restaurants, ())
        invokedSetRestaurantsParametersList.append((restaurants, ()))
    }
    var invokedSetRankings = false
    var invokedSetRankingsCount = 0
    var invokedSetRankingsParameters: (query: RankingsQuery, info: RankingsPageInfoJSON)?
    var invokedSetRankingsParametersList = [(query: RankingsQuery, info: RankingsPageInfoJSON)]()
    func set(rankings query: RankingsQuery,
    info: RankingsPageInfoJSON) {
        invokedSetRankings = true
        invokedSetRankingsCount += 1
        invokedSetRankingsParameters = (query, info)
        invokedSetRankingsParametersList.append((query, info))
    }
    var invokedSetScorecard = false
    var invokedSetScorecardCount = 0
    var invokedSetScorecardParameters: (scorecard: ScorecardWrapperJSON, Void)?
    var invokedSetScorecardParametersList = [(scorecard: ScorecardWrapperJSON, Void)]()
    func set(scorecard: ScorecardWrapperJSON) {
        invokedSetScorecard = true
        invokedSetScorecardCount += 1
        invokedSetScorecardParameters = (scorecard, ())
        invokedSetScorecardParametersList.append((scorecard, ()))
    }
    var invokedSetUncountries = false
    var invokedSetUncountriesCount = 0
    var invokedSetUncountriesParameters: (uncountries: [LocationJSON], Void)?
    var invokedSetUncountriesParametersList = [(uncountries: [LocationJSON], Void)]()
    func set(uncountries: [LocationJSON]) {
        invokedSetUncountries = true
        invokedSetUncountriesCount += 1
        invokedSetUncountriesParameters = (uncountries, ())
        invokedSetUncountriesParametersList.append((uncountries, ()))
    }
    var invokedFixUser = false
    var invokedFixUserCount = 0
    var invokedFixUserParameters: (data: UserJSON, Void)?
    var invokedFixUserParametersList = [(data: UserJSON, Void)]()
    func fix(user data: UserJSON) {
        invokedFixUser = true
        invokedFixUserCount += 1
        invokedFixUserParameters = (data, ())
        invokedFixUserParametersList.append((data, ()))
    }
    var invokedSetUser = false
    var invokedSetUserCount = 0
    var invokedSetUserParameters: (data: UserJSON, Void)?
    var invokedSetUserParametersList = [(data: UserJSON, Void)]()
    func set(user data: UserJSON) {
        invokedSetUser = true
        invokedSetUserCount += 1
        invokedSetUserParameters = (data, ())
        invokedSetUserParametersList.append((data, ()))
    }
    var invokedSetWhss = false
    var invokedSetWhssCount = 0
    var invokedSetWhssParameters: (whss: [WHSJSON], Void)?
    var invokedSetWhssParametersList = [(whss: [WHSJSON], Void)]()
    func set(whss: [WHSJSON]) {
        invokedSetWhss = true
        invokedSetWhssCount += 1
        invokedSetWhssParameters = (whss, ())
        invokedSetWhssParametersList.append((whss, ()))
    }
    var invokedSetWorld = false
    var invokedSetWorldCount = 0
    var invokedSetWorldParameters: (map: GeoJSON, Void)?
    var invokedSetWorldParametersList = [(map: GeoJSON, Void)]()
    func set(world map: GeoJSON) {
        invokedSetWorld = true
        invokedSetWorldCount += 1
        invokedSetWorldParameters = (map, ())
        invokedSetWorldParametersList.append((map, ()))
    }
    var invokedDeletePhoto = false
    var invokedDeletePhotoCount = 0
    var invokedDeletePhotoParameters: (photoId: Int, Void)?
    var invokedDeletePhotoParametersList = [(photoId: Int, Void)]()
    func delete(photo photoId: Int) {
        invokedDeletePhoto = true
        invokedDeletePhotoCount += 1
        invokedDeletePhotoParameters = (photoId, ())
        invokedDeletePhotoParametersList.append((photoId, ()))
    }
    var invokedDeletePhotos = false
    var invokedDeletePhotosCount = 0
    var invokedDeletePhotosParameters: (userId: Int, Void)?
    var invokedDeletePhotosParametersList = [(userId: Int, Void)]()
    func delete(photos userId: Int) {
        invokedDeletePhotos = true
        invokedDeletePhotosCount += 1
        invokedDeletePhotosParameters = (userId, ())
        invokedDeletePhotosParametersList.append((userId, ()))
    }
    var invokedDeletePost = false
    var invokedDeletePostCount = 0
    var invokedDeletePostParameters: (postId: Int, Void)?
    var invokedDeletePostParametersList = [(postId: Int, Void)]()
    func delete(post postId: Int) {
        invokedDeletePost = true
        invokedDeletePostCount += 1
        invokedDeletePostParameters = (postId, ())
        invokedDeletePostParametersList.append((postId, ()))
    }
    var invokedDeletePosts = false
    var invokedDeletePostsCount = 0
    var invokedDeletePostsParameters: (userId: Int, Void)?
    var invokedDeletePostsParametersList = [(userId: Int, Void)]()
    func delete(posts userId: Int) {
        invokedDeletePosts = true
        invokedDeletePostsCount += 1
        invokedDeletePostsParameters = (userId, ())
        invokedDeletePostsParametersList.append((userId, ()))
    }
    var invokedDeleteRankings = false
    var invokedDeleteRankingsCount = 0
    var invokedDeleteRankingsParameters: (rankings: Checklist, Void)?
    var invokedDeleteRankingsParametersList = [(rankings: Checklist, Void)]()
    func delete(rankings: Checklist) {
        invokedDeleteRankings = true
        invokedDeleteRankingsCount += 1
        invokedDeleteRankingsParameters = (rankings, ())
        invokedDeleteRankingsParametersList.append((rankings, ()))
    }
    var invokedResolve = false
    var invokedResolveCount = 0
    var invokedResolveParameters: (reference: Mappable.Reference, Void)?
    var invokedResolveParametersList = [(reference: Mappable.Reference, Void)]()
    var stubbedResolveResult: Mappable!
    func resolve(reference: Mappable.Reference) -> Mappable? {
        invokedResolve = true
        invokedResolveCount += 1
        invokedResolveParameters = (reference, ())
        invokedResolveParametersList.append((reference, ()))
        return stubbedResolveResult
    }
    var invokedUpdateRankings = false
    var invokedUpdateRankingsCount = 0
    var invokedUpdateRankingsParameters: (rankings: Checklist, Void)?
    var invokedUpdateRankingsParametersList = [(rankings: Checklist, Void)]()
    var stubbedUpdateRankingsThenResult: (Bool, Void)?
    func update(rankings: Checklist,
    then: @escaping Completion) {
        invokedUpdateRankings = true
        invokedUpdateRankingsCount += 1
        invokedUpdateRankingsParameters = (rankings, ())
        invokedUpdateRankingsParametersList.append((rankings, ()))
        if let result = stubbedUpdateRankingsThenResult {
            then(result.0)
        }
    }
    var invokedUpdateScorecard = false
    var invokedUpdateScorecardCount = 0
    var invokedUpdateScorecardParameters: (scorecard: Checklist, Void)?
    var invokedUpdateScorecardParametersList = [(scorecard: Checklist, Void)]()
    var stubbedUpdateScorecardThenResult: (Bool, Void)?
    func update(scorecard: Checklist,
    then: @escaping Completion) {
        invokedUpdateScorecard = true
        invokedUpdateScorecardCount += 1
        invokedUpdateScorecardParameters = (scorecard, ())
        invokedUpdateScorecardParametersList.append((scorecard, ()))
        if let result = stubbedUpdateScorecardThenResult {
            then(result.0)
        }
    }
    var invokedUpdate = false
    var invokedUpdateCount = 0
    var invokedUpdateParameters: (stamp: RankingsPageInfo?, Void)?
    var invokedUpdateParametersList = [(stamp: RankingsPageInfo?, Void)]()
    func update(stamp: RankingsPageInfo?) {
        invokedUpdate = true
        invokedUpdateCount += 1
        invokedUpdateParameters = (stamp, ())
        invokedUpdateParametersList.append((stamp, ()))
    }
    var invokedValidate = false
    var invokedValidateCount = 0
    func validate() {
        invokedValidate = true
        invokedValidateCount += 1
    }
    var invokedNotify = false
    var invokedNotifyCount = 0
    var invokedNotifyParameters: (changed: String, info: [AnyHashable: Any])?
    var invokedNotifyParametersList = [(changed: String, info: [AnyHashable: Any])]()
    func notify(observers changed: String,
    info: [AnyHashable: Any]) {
        invokedNotify = true
        invokedNotifyCount += 1
        invokedNotifyParameters = (changed, info)
        invokedNotifyParametersList.append((changed, info))
    }
}
