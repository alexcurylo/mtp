//
// project_base.xcconfig
//
// Generated by BuildSettingExtractor on 9/22/18
// https://github.com/dempseyatgithub/BuildSettingExtractor
//


// Always Embed Swift Standard Libraries
// 
// Always embed the Swift standard libraries in the target's products, even if the target
// does not contain any Swift code.  For example, this should be enabled if the target is
// embedding other products which contain Swift, or if it is a test target which does not
// contain Swift but which is testing a product which does.  This setting only applies to
// wrapped products, not to standalone binary products.

ALWAYS_EMBED_SWIFT_STANDARD_LIBRARIES = YES



// Always Search User Paths (Deprecated)
// 
// This setting is deprecated as of Xcode 8.3 and may not be supported in future
// versions. It is recommended that you disable the setting.
// 
// If enabled, both `#include <header.h>`-style and `#include "header.h"`-style
// directives search the paths in `USER_HEADER_SEARCH_PATHS` before
// `HEADER_SEARCH_PATHS`. As a consequence, user headers, such as your own `String.h`
// header, have precedence over system headers when using `#include <header.h>`. This is
// done using the `-iquote` flag for the paths provided in `USER_HEADER_SEARCH_PATHS`. If
// disabled and your compiler fully supports separate user paths, user headers are only
// accessible with `#include "header.h"`-style preprocessor directives.
// 
// For backwards compatibility reasons, this setting is enabled by default. Disabling it
// is strongly recommended.

ALWAYS_SEARCH_USER_PATHS = NO



CLANG_ANALYZER_GCD_PERFORMANCE = YES



CLANG_ANALYZER_LOCALIZABILITY_EMPTY_CONTEXT = YES



CLANG_ANALYZER_LOCALIZABILITY_NONLOCALIZED = YES



CLANG_ANALYZER_NONNULL = YES



CLANG_ANALYZER_NUMBER_OBJECT_CONVERSION = YES_AGGRESSIVE



CLANG_ANALYZER_SECURITY_FLOATLOOPCOUNTER = YES



CLANG_ANALYZER_SECURITY_INSECUREAPI_RAND = YES



CLANG_ANALYZER_SECURITY_INSECUREAPI_STRCPY = YES



CLANG_CXX_LANGUAGE_STANDARD = gnu++14



CLANG_CXX_LIBRARY = libc++



CLANG_ENABLE_MODULES = YES



CLANG_ENABLE_OBJC_ARC = YES



CLANG_ENABLE_OBJC_WEAK = YES



CLANG_UNDEFINED_BEHAVIOR_SANITIZER_INTEGER = YES



CLANG_UNDEFINED_BEHAVIOR_SANITIZER_NULLABILITY = YES



CLANG_WARN__DUPLICATE_METHOD_MATCH = YES



CLANG_WARN__EXIT_TIME_DESTRUCTORS = YES



CLANG_WARN_ASSIGN_ENUM = YES



CLANG_WARN_BLOCK_CAPTURE_AUTORELEASING = YES



CLANG_WARN_BOOL_CONVERSION = YES



CLANG_WARN_COMMA = YES



CLANG_WARN_CONSTANT_CONVERSION = YES



CLANG_WARN_CXX0X_EXTENSIONS = YES



CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS = YES



CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR



CLANG_WARN_DOCUMENTATION_COMMENTS = YES



CLANG_WARN_EMPTY_BODY = YES



CLANG_WARN_ENUM_CONVERSION = YES



CLANG_WARN_IMPLICIT_SIGN_CONVERSION = YES_ERROR



CLANG_WARN_INFINITE_RECURSION = YES



CLANG_WARN_INT_CONVERSION = YES



CLANG_WARN_NON_LITERAL_NULL_CONVERSION = YES



CLANG_WARN_OBJC_EXPLICIT_OWNERSHIP_TYPE = YES



CLANG_WARN_OBJC_IMPLICIT_ATOMIC_PROPERTIES = YES



CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF = YES



CLANG_WARN_OBJC_INTERFACE_IVARS = YES_ERROR



CLANG_WARN_OBJC_LITERAL_CONVERSION = YES



CLANG_WARN_OBJC_MISSING_PROPERTY_SYNTHESIS = YES



CLANG_WARN_OBJC_REPEATED_USE_OF_WEAK = YES



CLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR



CLANG_WARN_RANGE_LOOP_ANALYSIS = YES



CLANG_WARN_SEMICOLON_BEFORE_METHOD_BODY = YES



CLANG_WARN_STRICT_PROTOTYPES = YES



CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION = YES_ERROR



CLANG_WARN_SUSPICIOUS_MOVE = YES



CLANG_WARN_UNGUARDED_AVAILABILITY = YES_AGGRESSIVE



CLANG_WARN_UNREACHABLE_CODE = YES



// Code Signing Identity
// 
// The name, also known as the *common name*, of a valid code-signing certificate in a
// keychain within your keychain path. A missing or invalid certificate will cause a
// build error.

CODE_SIGN_IDENTITY = iPhone Developer



// Strip Debug Symbols During Copy
// 
// Specifies whether binary files that are copied during the build, such as in a Copy
// Bundle Resources or Copy Files build phase, should be stripped of debugging symbols.
// It does not cause the linked product of a target to be strippedâ€”use
// `STRIP_INSTALLED_PRODUCT` for that.

COPY_PHASE_STRIP = NO



// Debug Information Format
// 
// The type of debug information to produce.
// 
// * *DWARF:* Object files and linked products will use DWARF as the debug information
// format. [dwarf]
// * *DWARF with dSYM File:* Object files and linked products will use DWARF as the debug
// information format, and Xcode will also produce a dSYM file containing the debug
// information from the individual object files (except that a dSYM file is not needed
// and will not be created for static library or object file products). [dwarf-with-dsym]

DEBUG_INFORMATION_FORMAT = dwarf-with-dsym



// Development Team
// 
// The team ID of a development team to use for signing certificates and provisioning
// profiles.

DEVELOPMENT_TEAM = 556343DW3U



ENABLE_STRICT_OBJC_MSGSEND = YES



GCC_C_LANGUAGE_STANDARD = gnu11



GCC_NO_COMMON_BLOCKS = YES



GCC_TREAT_IMPLICIT_FUNCTION_DECLARATIONS_AS_ERRORS = YES



GCC_TREAT_INCOMPATIBLE_POINTER_TYPE_WARNINGS_AS_ERRORS = YES



GCC_TREAT_WARNINGS_AS_ERRORS = YES



GCC_WARN_64_TO_32_BIT_CONVERSION = YES



GCC_WARN_ABOUT_MISSING_FIELD_INITIALIZERS = YES



GCC_WARN_ABOUT_MISSING_NEWLINE = YES



GCC_WARN_ABOUT_MISSING_PROTOTYPES = YES



GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR



GCC_WARN_FOUR_CHARACTER_CONSTANTS = YES



GCC_WARN_HIDDEN_VIRTUAL_FUNCTIONS = YES



GCC_WARN_INITIALIZER_NOT_FULLY_BRACKETED = YES



GCC_WARN_NON_VIRTUAL_DESTRUCTOR = YES



GCC_WARN_PEDANTIC = YES



GCC_WARN_SHADOW = YES



GCC_WARN_SIGN_COMPARE = YES



GCC_WARN_STRICT_SELECTOR_MATCH = YES



GCC_WARN_UNDECLARED_SELECTOR = YES



GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE



GCC_WARN_UNKNOWN_PRAGMAS = YES



GCC_WARN_UNUSED_FUNCTION = YES



GCC_WARN_UNUSED_LABEL = YES



GCC_WARN_UNUSED_PARAMETER = YES



GCC_WARN_UNUSED_VARIABLE = YES



// iOS Deployment Target
// 
// Code will load on this and later versions of iOS. Framework APIs that are unavailable
// in earlier versions will be weak-linked; your code should check for null function
// pointers or specific system versions before calling newer APIs.

IPHONEOS_DEPLOYMENT_TARGET = 11.0



// Enable fast math
// 
// Enable optimizations for floating-point arithmetic that may violate the IEEE 754
// standard and disable the high precision variant of math functions for single and half
// precision floating-point.

MTL_FAST_MATH = YES



// Base SDK
// 
// The name or path of the base SDK being used during the build. The product will be
// built against the headers and libraries located inside the indicated SDK. This path
// will be prepended to all search paths, and will be passed through the environment to
// the compiler and linker. Additional SDKs can be specified in the `ADDITIONAL_SDKS`
// setting.

SDKROOT = iphoneos



// Swift Language Version
// 
// NOTE: This must also be set as a project level custom setting for `pod install` to work correctly!

SWIFT_VERSION = 5.0



// Targeted Device Family
// 
// The build system uses the selected device to set the correct value for the
// `UIDeviceFamily` key it adds to the target's `Info.plist` file. This also drives the
// --target-device flag to actool, which determines the idioms selected during catalog
// compilation for iOS platforms.

TARGETED_DEVICE_FAMILY = 1,2
